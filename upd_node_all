#device_info.py
import time

class DeviceInfo:
    def __init__(self, name, ip, port):
        self.name = name
        self.ip = ip
        self.port = port    
        self.last_heartbeat = time.time()

    def update_heartbeat(self):
        self.last_heartbeat = time.time()

#message_handler.py
from device_info import DeviceInfo
import hashlib
import base64
import os

received_chunks = {}  #dict para armazenar a parte recebida do arquivo

class MessageHandler:
    @staticmethod
    def handle_message(message, sender_ip, sender_port, udp_node):
        parts = message.strip().split(" ", 3)
        if not parts:
            return

        cmd = parts[0]

        if cmd == "HEARTBEAT" and len(parts) > 1:
            name = parts[1]
            if name not in udp_node.active_devices:
                udp_node.active_devices[name] = DeviceInfo(name, sender_ip, sender_port)
            else:
                udp_node.active_devices[name].update_heartbeat()
            print(f"[INFO] HEARTBEAT de {name}")

        elif cmd == "TALK" and len(parts) >= 3:
            msg_id = parts[1]
            data = parts[2]
            print(f"[TALK recebido] {data}")
            udp_node.send_udp(f"ACK {msg_id}", sender_ip, sender_port)

        elif cmd == "ACK" and len(parts) >= 2:
            ack_id = parts[1]
            if ack_id in udp_node.pending_messages:
                udp_node.pending_messages[ack_id].acknowledged = True
                del udp_node.pending_messages[ack_id]
                print(f"[ACK recebido] {ack_id}")

        elif cmd == "FILE" and len(parts) >= 4:
            msg_id, filename, filesize = parts[1], parts[2], int(parts[3])
            print(f"[FILE recebido] {filename} ({filesize} bytes)")
            received_chunks[msg_id] = {"chunks": {}, "filename": filename, "filesize": filesize, "last_seq": 0}
            udp_node.send_udp(f"ACK {msg_id}", sender_ip, sender_port)

        elif cmd == "CHUNK" and len(parts) >= 4:
            msg_id, seq, b64data = parts[1], int(parts[2]), parts[3]
            chunk_data = base64.b64decode(b64data.encode('utf-8'))
            if msg_id in received_chunks:
                file_entry = received_chunks[msg_id]
                if seq in file_entry["chunks"]:
                    print(f"[DUPLICADO] CHUNK {seq} já recebido, descartado")
                    return  #ignora duplicata

                if seq != file_entry["last_seq"] + 1:
                    udp_node.send_udp(f"NACK {msg_id} fora_de_ordem_esperado_{file_entry['last_seq'] + 1}_recebido_{seq}", sender_ip, sender_port)
                    print(f"[NACK enviado] CHUNK fora de ordem: esperado {file_entry['last_seq'] + 1}, recebido {seq}")
                    return

                file_entry["chunks"][seq] = chunk_data
                file_entry["last_seq"] = seq
                udp_node.send_udp(f"ACK {msg_id}-seq{seq}", sender_ip, sender_port)

        elif cmd == "END" and len(parts) >= 3:
            msg_id, received_hash = parts[1], parts[2]
            if msg_id in received_chunks:
                chunks = received_chunks[msg_id]["chunks"]
                ordered = [chunks[i] for i in sorted(chunks)]
                data = b"".join(ordered)
                local_hash = hashlib.md5(data).hexdigest()
                if local_hash == received_hash:
                    filename = received_chunks[msg_id]["filename"]
                    with open(f"recv_{filename}", "wb") as f:
                        f.write(data)
                    udp_node.send_udp(f"ACK {msg_id}", sender_ip, sender_port)
                    print(f"[Arquivo salvo como recv_{filename}]")
                else:
                    udp_node.send_udp(f"NACK {msg_id} hash_invalido", sender_ip, sender_port)
                    print("[NACK enviado] Hash inválido no arquivo recebido")
                del received_chunks[msg_id]

        elif cmd == "NACK" and len(parts) >= 3:
            print(f"[NACK recebido] ID={parts[1]} Motivo={parts[2]}")

#pending_message.py
import time

class PendingMessage:
    def __init__(self, msg_id, message, dest_ip, dest_port):
        self.id = msg_id
        self.message = message
        self.dest_ip = dest_ip
        self.dest_port = dest_port
        self.last_sent = time.time()
        self.acknowledged = False

    def update_last_sent(self):
        self.last_sent = time.time()


#udp_node.py
import socket
import threading
import time
import base64
import os
import hashlib
import argparse
from pending_message import PendingMessage
from device_info import DeviceInfo
from message_handler import MessageHandler

HEARTBEAT_INTERVAL = 5
DEVICE_TIMEOUT = 10
CLEANUP_INTERVAL = 2
RESEND_INTERVAL = 2
PORT = 11000
message_counter = 0

class UdpNode:
    def __init__(self, device_name, dest_ip="255.255.255.255", dest_port=11000): #dest_port é só para caso queira falar entre processos diretamente (tem que mudar a porta padrão tmb)
        self.device_name = device_name
        self.dest_ip = dest_ip
        self.dest_port = dest_port
        self.active_devices = {}
        self.pending_messages = {}
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('', PORT))
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        self.lock = threading.Lock()

    def start(self, dest_ip):
        threading.Thread(target=self.listen_loop, daemon=True).start()
        self._schedule(lambda: self.send_heartbeat(dest_ip), HEARTBEAT_INTERVAL)  # Pass dest_ip
        self._schedule(self.cleanup_inactive_devices, CLEANUP_INTERVAL)
        self._schedule(self.resend_pending_messages, RESEND_INTERVAL)
        self.send_heartbeat(dest_ip)
        self.console_loop()
        
    def listen_loop(self):
        while True:
            data, addr = self.socket.recvfrom(8192)
            message = data.decode('utf-8')
            sender_ip, sender_port = addr
            MessageHandler.handle_message(message, sender_ip, sender_port, self)

    def send_udp(self, message, dest_ip, dest_port):
        self.socket.sendto(message.encode('utf-8'), (dest_ip, dest_port))

    def send_heartbeat(self, dest_ip):
        msg = f"HEARTBEAT {self.device_name}"
        self.send_udp(msg, dest_ip, PORT)

    def cleanup_inactive_devices(self):
        now = time.time()
        with self.lock:
            to_remove = [name for name, info in self.active_devices.items()
                         if now - info.last_heartbeat > DEVICE_TIMEOUT]
            for name in to_remove:
                print(f">>> [INFO] Dispositivo inativo removido: {name}")
                del self.active_devices[name]

    def resend_pending_messages(self):
        now = time.time()
        for pm in list(self.pending_messages.values()):
            if pm.acknowledged:
                continue
            if now - pm.last_sent > 3:
                print(f"[RETX] Reenviando ID={pm.id}")
                self.send_udp(pm.message, pm.dest_ip, pm.dest_port)
                pm.update_last_sent()

    def console_loop(self):
        while True:
            line = input("> ").strip()
            if not line:
                continue
            parts = line.split(" ", 1)
            cmd = parts[0].lower()
            if cmd == "devices":
                self.list_devices()
            elif cmd == "talk" and len(parts) > 1:
                try:
                    target, msg = parts[1].split(" ", 1)
                    self.send_talk(target, msg)
                except ValueError:
                    print("Uso: talk <nome> <mensagem>")
            elif cmd == "sendfile" and len(parts) > 1:
                try:
                    target, path = parts[1].split(" ", 1)
                    self.send_file(target, path)
                except ValueError:
                    print("Uso: sendfile <nome> <caminho-arquivo>")
            else:
                print("Comando não reconhecido:", cmd)

    def list_devices(self):
        print("=== Dispositivos Ativos ===")
        now = time.time()
        for info in self.active_devices.values():
            diff = now - info.last_heartbeat
            print(f"* {info.name} - {info.ip}:{info.port} (último heartbeat há {int(diff * 1000)} ms)")
        print("===========================")

    def send_talk(self, target_name, content):
        info = self.active_devices.get(target_name)
        if not info:
            print("[ERRO] Dispositivo não encontrado:", target_name)
            return
        msg_id = self._generate_message_id()
        msg = f"TALK {msg_id} {content}"
        self.pending_messages[msg_id] = PendingMessage(msg_id, msg, info.ip, info.port)
        self.send_udp(msg, info.ip, info.port)

    def send_file(self, target_name, file_path):
        info = self.active_devices.get(target_name)
        if not info:
            print("[ERRO] Dispositivo não encontrado:", target_name)
            return
        if not os.path.isfile(file_path):
            print("[ERRO] Arquivo não encontrado:", file_path)
            return

        msg_id = self._generate_message_id()
        file_name = os.path.basename(file_path)
        file_size = os.path.getsize(file_path)

        header = f"FILE {msg_id} {file_name} {file_size}"
        self.pending_messages[msg_id] = PendingMessage(msg_id, header, info.ip, info.port)
        self.send_udp(header, info.ip, info.port)

        with open(file_path, 'rb') as f:
            seq = 0
            while chunk := f.read(1024):
                seq += 1
                base64_data = base64.b64encode(chunk).decode('utf-8')
                chunk_msg = f"CHUNK {msg_id} {seq} {base64_data}"
                chunk_id = f"{msg_id}-seq{seq}"
                self.pending_messages[chunk_id] = PendingMessage(chunk_id, chunk_msg, info.ip, info.port)
                self.send_udp(chunk_msg, info.ip, info.port)
                print(f"... enviado CHUNK seq={seq} ({len(chunk)} bytes)")

        with open(file_path, 'rb') as f:
            file_data = f.read()
        file_hash = hashlib.md5(file_data).hexdigest()

        end_msg = f"END {msg_id} {file_hash}"
        end_id = f"{msg_id}-end"
        self.pending_messages[end_id] = PendingMessage(end_id, end_msg, info.ip, info.port)
        self.send_udp(end_msg, info.ip, info.port)
        print(f">>> [END enviado] ID={msg_id}")

    def _schedule(self, func, interval):
        def wrapper():
            while True:
                func()
                time.sleep(interval)
        threading.Thread(target=wrapper, daemon=True).start()

    def _generate_message_id(self):
        global message_counter
        message_counter += 1
        return f"msg{message_counter}"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="UDP Node")
    parser.add_argument("--name", required=True, help="Nome do dispositivo")
    parser.add_argument("--dest-ip", default="255.255.255.255", help="Endereço IP de destino")
    parser.add_argument("--dest-port", type=int, default=9876, help="Porta de destino")
    args = parser.parse_args()

    node = UdpNode(args.name, args.dest_ip, args.dest_port)
    node.start(args.dest_ip)

